"""
***GFresNet structure with 22 layers for defect classification.***

Since the paper is being submitted, the database set will be published after the paper is accepted.
Database set information:The defects are classified as three types and specimens with no defect are also included.
In the established database set, the defect depth ranges from 10% to 50%, with 10% intervals.
In addition, the radius of the pinhole defect ranges from 0.5 mm to 3 mm,
and the sizes of the crack defect range from 1×5 mm2 to 2×10 mm2,
and the sizes of the corrosion defect range from 5×5 mm2 to 10×10 mm2.
Each defect contains 1500 signal data, and the ratio of the training,
validation, and test data sets are divided into 6:2:2 in this work. The data storage format and 
explain the descriptive data (take the pinhole defect signal with a radius of 3 mm and a depth of 10% as an example). 
The data set has a total of 48,060,000 signal value data and contains detailed information about defects.

No.	1	2	3	4	5	6	7	8	9	10	11	12	13	14	···
Data	-1	1	0	0	3	10	0	0	0	-2	0	0	0	0	···

Title: Development of frequency-mixed point-focusing shear horizontal guided wave EMAT for defect inspection using deep neural network
Author: Hongyu Sun, State Key of Power Systems, Department of Electrical Engineering, Tsinghua University, Beijing, 10084, China.
Email: sunhy18@mails.tsinghua.edu.cn

If you use our code and database set, please cite our paper
[Hongyu Sun, Lisha Peng, Shen Wang, Songling Huang, Kaifeng Qu, "Development of frequency-mixed pointfocusing shear horizontal guided wave EMAT for defect inspection using deep neural network," IEEE Transactions on Instrumentation and Measurement, 2020, DOI: 10.1109/TIM.2020.3033941].
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras import models, layers, losses, metrics, callbacks, Sequential, optimizers
import os


gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True) # Allocate memory on demand


os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

class BasicBlock(layers.Layer):
    def __init__(self, filter_num, stride=1):
        super(BasicBlock, self).__init__()

        self.conv1 = layers.Conv1D(filter_num, kernel_size=3, strides=stride, padding='same')
        self.bn1 = layers.BatchNormalization()
        self.ReLU = layers.Activation('relu')

        self.conv2 = layers.Conv1D(filter_num, kernel_size=3, strides=1, padding='same')
        self.bn2 = layers.BatchNormalization()

        if stride != 1:
            self.downsample = Sequential()
            self.downsample.add(layers.Conv1D(filter_num, kernel_size=1, strides=stride, padding='same'))
        else:
            self.downsample = lambda x:x

    def call(self, inputs, trainable=None):

        x = self.conv1(inputs)
        x = self.bn1(x)
        x = self.ReLU(x)

        x = self.conv2(x)
        x = self.bn2(x)

        identity = self.downsample(inputs)
        out = layers.add([x, identity])
        out = tf.nn.relu(out)

        return out

class ResNet(layers.Layer):
    def __init__(self, layer_dim, num_classes=4):
        super(ResNet, self).__init__()

        self.stem = Sequential([
            layers.Conv1D(32, kernel_size=3, strides=1, padding='same'),
            layers.BatchNormalization(),
            layers.Activation('relu'),
            layers.MaxPooling1D(pool_size=2, strides=1, padding='same')
        ])

        self.layer1 = self.build_ResBlock(  32, layer_dim[0], stride=1)
        self.layer2 = self.build_ResBlock(  64, layer_dim[1], stride=2)
        self.layer3 = self.build_ResBlock( 128, layer_dim[2], stride=2)
        self.layer4 = self.build_ResBlock( 256, layer_dim[3], stride=2)

        self.flt = layers.Flatten()
        self.fc = layers.Dense(num_classes)

    def call(self, inputs, trainable=None):

        x = self.stem(inputs)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = self.flt(x)
        x = self.fc(x)

        return x

    def build_ResBlock(self, filter_num, blocks, stride=1):

        resblock = Sequential()
        resblock.add(BasicBlock(filter_num, stride=stride))

        for _ in range(blocks):
            resblock.add(BasicBlock(filter_num, stride=1))

        return resblock

def resnet():
    return ResNet([2, 2, 3, 3])

def get_data(file_path, shuffle_number=1000, batch_number=30):
    data_read = pd.read_csv(file_path, header=None)
    data = data_read.values[:, 10:] # data
    label = []
    for i in data_read.values[:, 1:2]: # label
        for j in i:
            label.append(j)
    label = np.array(label)
    data_db  = tf.data.Dataset.from_tensor_slices(tf.constant(data, dtype=tf.float32))
    label_db = tf.data.Dataset.from_tensor_slices(tf.constant(label, dtype=tf.int32))
    data_base = tf.data.Dataset.zip((data_db, label_db)).shuffle(shuffle_number).batch(batch_number)
    return data_base

def pre_process(x, y):
    x = tf.expand_dims(x, axis=2)
    y = tf.cast(y, tf.int32)
    y_onehot = tf.one_hot(y, 4)
    return x, y_onehot

def main():

    optimizer = optimizers.Adam(1e-4)
    model = resnet()

    # Please make sure the file path is correct.
    train_db = get_data(file_path=r'C:\Users\孙洪宇\PycharmProjects\MyProject\UltraDL\Data\CSV_30\train_30.csv').map(pre_process)
    test_db= get_data(file_path=r'C:\Users\孙洪宇\PycharmProjects\MyProject\UltraDL\Data\CSV_30\validate_30.csv').map(pre_process)

    for epoch in range(20):
        for step, (x, y) in enumerate(train_db):
            with tf.GradientTape() as tape:
                out = model(x)
                loss = tf.losses.categorical_crossentropy(y, out, from_logits=True)
                loss = tf.reduce_sum(loss)
            grads = tape.gradient(loss, model.trainable_variables)
            optimizer.apply_gradients(zip(grads, model.trainable_variables))

            if step % 100 ==0:
                print('loss=', loss.numpy(), end='; ')


        total_corr = 0
        total = 0

        for step, (x, y) in enumerate(test_db):
            out = model(x)
            pred = tf.cast(tf.argmax(out, axis=1), tf.int32)
            y_lable = tf.cast(tf.argmax(y, axis=1), tf.int32)
            total_corr += tf.reduce_sum(tf.cast(tf.equal(pred, y_lable), tf.int32))
            total += x.shape[0]

            if step % 100 == 0:
                print('acc=', (total_corr / total).numpy())


        # # Use the trained network to predict single signals
        # data_read = pd.read_csv(r'C:\Users\孙洪宇\PycharmProjects\MyProject\UltraDL\Data\CSV_all\train_all.csv', header=None)
        # data = data_read.values[128, 10:]
        # data = tf.reshape(data, shape=(1, 8000))
        #
        # data = tf.expand_dims(data, axis=2)
        # label = data_read.values[128, 1:2]
        #
        # out = model(data)
        # pred = tf.cast(tf.argmax(out, axis=1), tf.int32)
        # print('pred=', pred, ';label=', label)


# 50：loss= 0.096975826; acc= 1.0
# 40：loss= 0.014988685; acc= 0.9333333333333333
# 30：loss= 3.6633143; acc= 0.9666666666666667
# 20：loss= 19.096172; acc= 0.8666666666666667
# 10：loss= 3.4919353; acc= 0.9333333333333333 # notice that: lr:1e-4=>2e-5,epoch:20=>30
#ALL：loss= 0.034056105; acc= 0.9666666666666667

if __name__ == '__main__':
    main()
